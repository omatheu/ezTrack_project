# DiagramaSequênciaProcessamentoIntegração
# Iniciação do Diagrama de Sequência
shape: sequence_diagram

# Atores e objetos
comprador/vendedor: "Comprador/Vendedor" {shape: person}
plataformaFrontend: "Plataforma Frontend"
nodeEthereum: "Node Ethereum"
nodeCartesi: "Node Cartesi"

# Solicitação da operação
comprador/vendedor.t1 -> plataformaFrontend.t2: "1.0 SolicitaOperação()"
plataformaFrontend -> nodeEthereum.t3: "1.1 SolicitaOperação()"
nodeEthereum.t3 -> nodeCartesi.t4: "1.2 SolicitaProcesso()"
nodeCartesi -> nodeCartesi: "2.0 Processo()"

# Caso a resposta for confiável
Verifica se a resposta é confiável\nse é confiável: {
  nodeCartesi.t4 -> plataformaFrontend: "3.0 RetornaResultado()" {style.stroke-dash: 5}
  plataformaFrontend -> comprador/vendedor: 3.1 Feedback" {style.stroke-dash: 5}
}
# Caso não for
se não é confiável: {
  nodeCartesi.t4 -> nodeEthereum.t5: "4.0 SolicitaVerificação()"
  nodeEthereum -> nodeEthereum: "4.1 Verifica()"
  nodeEthereum.t5 -> plataformaFrontend: "4.2 RetornaResultado()" {style.stroke-dash: 5}
  plataformaFrontend.t2 -> comprador/vendedor.t1: "4.3 Feedback" {style.stroke-dash: 5}
}

# 1.0 - O usuário solicita alguma operação na plataforma
# 1.1 - O frontend enviará um comando para que a rede de blockchain EVM realize a operação usando o Smart Contract
# 1.2 - É feito um roll-up para que a CVM (node Cartesi) processe essa operação
# 2.0 - A operação é processada no node Cartesi

# OBS: Algumas operações feitas no Cartesi têm um ótimo resultado, outras precisam ser validadas na rede Ethereum. A condição será pré-estabelecida no código.

# Caso a resposta for confiável:
# 	3.0 - O resultado é retornado diretamente ao frontend
# 	3.1 - Um feedback com o resultado é dado ao usuário

# Caso não for:
# 	4.0 - Uma verificação da resposta será solicitada ao Smart Contract do node Ethereum
# 	4.1 - A operação é processada no node Ethereum
# 	4.2 - O resultado é retornado ao frontend
# 	4.3 - Um feedback com o resultado é dado ao usuário
